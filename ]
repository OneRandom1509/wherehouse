use std::sync::mpsc::{Receiver, Sender};

use crate::app;

enum InputMode {
    Normal,
    Insert,
}

enum PackageManager {
    Homebrew,
}

enum Pane {
    SearchInput,
    SearchResults,
}

enum StateEvent {
    SetSearchQuery(Sender<StateEvent>, String),
    SetSearchResults,
    GetSearchQuery(Sender<StateEvent>),
    GetSearchResults,
}

impl std::fmt::Display for InputMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Normal => write!(f, "NORMAL"),
            Self::Insert => write!(f, "INSERT"),
        }
    }
}

#[derive(Default)]
struct SearchResult {
    display_text: String,
}

#[derive(Default)]
struct SearchState {
    query: String,
    results: Option<Vec<SearchResult>>,
}

pub struct State {
    current_pane: Pane,
    input_mode: InputMode,
    search: SearchState,
    package_manager: PackageManager,
}

impl Default for State {
    fn default() -> Self {
        Self {
            current_pane: Pane::SearchInput,
            input_mode: InputMode::Insert,
            search: SearchState::default(),
            package_manager: PackageManager::Homebrew,
        }
    }
}

impl State {
    fn manage(&self, rx: Receiver<StateEvent>) {
        loop {
            if let Ok(event) = rx.recv() {
                match event {
                    StateEvent::GetSearchQuery(_) => self.search.query,
                }
            } else {
            };
        }
    }
}
